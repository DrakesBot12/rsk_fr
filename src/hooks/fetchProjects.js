import { useState, useCallback } from "react";
import { useRouter } from "next/navigation";

const CATEGORY_NAMES = {
    KNOWLEDGE: "–ó–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏",
    INTERACTION: "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ",
    ENVIRONMENT: "–û–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞",
    PROTECTION: "–ó–∞—â–∏—Ç–∞",
    DATA: "–î–∞–Ω–Ω—ã–µ",
    AUTOMATION: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
};

const CATEGORY_DESCRIPTIONS = {
    KNOWLEDGE: "–†–∞–∑–≤–∏—Ç–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É–º–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π",
    INTERACTION: "–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ collaboration –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–ª–µ–¥–∂–∞",
    ENVIRONMENT: "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã",
    PROTECTION: "–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö",
    DATA: "–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
    AUTOMATION: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
};

export function useProjects(org_name = undefined) {
    const router = useRouter();
    const [categories, setCategories] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const fetchProjects = useCallback(
        async (orgName) => {
            try {
                if (orgName !== null && orgName !== undefined) {
                    setLoading(true);
                    const response = await fetch(`/api/projects/all/${orgName}`, {
                        method: "GET",
                        headers: { "Content-Type": "application/json" },
                        credentials: "include",
                    });

                    if (!response.ok) {
                        if ([401, 403].includes(response.status)) {
                            router.push("/auth");
                            return;
                        }
                        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã");
                    }

                    const result = await response.json();
                    if (result.success) setCategories(result.data);
                    else throw new Error(result.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤");
                } else {
                    throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏");
                }
            } catch (err) {
                console.error("Projects fetch error:", err);
                setError(err.message);
            } finally {
                setLoading(false);
            }
        },
        [router]
    ); // üëà —Ç–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞

    return { loading, categories, error, fetchProjects };
}
